name: K6 Tests with Built-in HTML Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-all-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Create results directory
      run: mkdir -p test-results

    - name: Run all K6 tests with summary
      id: run-tests
      run: |
        echo "üöÄ Running all K6 tests..."
        
        for test_file in tests/*.js; do
          if [ -f "$test_file" ]; then
            filename=$(basename "$test_file" .js)
            echo "‚ñ∂Ô∏è Running: $filename"
            
            # Run test and capture summary
            k6 run "$test_file" --summary-export="test-results/$filename-summary.json" && \
            echo "‚úÖ PASS: $filename" || \
            echo "‚ùå FAIL: $filename"
            
            echo "----------------------------------------"
          fi
        done

    - name: Generate simple HTML report
      run: |
        echo "üìä Generating HTML reports from summaries..."
        
        # Create a simple HTML report
        cat > test-results/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K6 Test Results</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test { border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .pass { background-color: #f0fff0; border-left: 5px solid #4CAF50; }
        .fail { background-color: #fff0f0; border-left: 5px solid #f44336; }
        .metric { margin: 5px 0; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>üß™ K6 Performance Test Results</h1>
    <div id="tests"></div>
    
    <script>
        const tests = [];
        EOF
        
        # Add each test summary to the HTML
        for file in test-results/*-summary.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" -summary.json)
            echo "tests.push({name: '$filename', data: $(cat "$file")});" >> test-results/index.html
          fi
        done
        
        # Add the JavaScript to render the report
        cat >> test-results/index.html << 'EOF'
        
        tests.forEach(test => {
            const testDiv = document.createElement('div');
            testDiv.className = 'test ' + (test.data.state.pass ? 'pass' : 'fail');
            
            const metrics = test.data.metrics;
            const httpReqs = metrics.http_reqs;
            const httpDuration = metrics.http_req_duration;
            const checks = metrics.checks;
            
            testDiv.innerHTML = `
                <h2>${test.name} ${test.data.state.pass ? '‚úÖ' : '‚ùå'}</h2>
                <div class="metric"><strong>Status:</strong> ${test.data.state.pass ? 'PASS' : 'FAIL'}</div>
                <div class="metric"><strong>Total Requests:</strong> ${httpReqs ? httpReqs.values.count : 0}</div>
                <div class="metric"><strong>Success Rate:</strong> ${checks ? (checks.values.rate * 100).toFixed(2) + '%' : 'N/A'}</div>
                <div class="metric"><strong>Avg Response Time:</strong> ${httpDuration ? httpDuration.values.avg.toFixed(2) + 'ms' : 'N/A'}</div>
                <div class="metric"><strong>p(95) Response Time:</strong> ${httpDuration ? httpDuration.values['p(95)'].toFixed(2) + 'ms' : 'N/A'}</div>
            `;
            
            document.getElementById('tests').appendChild(testDiv);
        });
    </script>
</body>
</html>
EOF

    - name: Generate detailed summary
      run: |
        echo "## üß™ K6 Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for file in test-results/*-summary.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" -summary.json)
            data=$(cat "$file")
            state=$(echo "$data" | jq -r '.state.pass')
            http_reqs=$(echo "$data" | jq -r '.metrics.http_reqs.values.count // 0')
            avg_duration=$(echo "$data" | jq -r '.metrics.http_req_duration.values.avg // 0 | round')
            success_rate=$(echo "$data" | jq -r '(.metrics.checks.values.rate // 0) * 100 | round')
            
            if [ "$state" = "true" ]; then
              echo "‚úÖ **$filename**: $http_reqs requests, ${avg_duration}ms avg, ${success_rate}% success" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **$filename**: Test failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ Download Reports:" >> $GITHUB_STEP_SUMMARY
        echo "Download the artifacts to view the HTML report with detailed metrics." >> $GITHUB_STEP_SUMMARY

    - name: Upload HTML Report and Summaries
      uses: actions/upload-artifact@v4
      with:
        name: k6-test-results
        path: test-results/
        retention-days: 30